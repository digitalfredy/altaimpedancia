#! /usr/bin/vvp
:vpi_time_precision + 0;
:vpi_module "system";
S_0x8d88f28 .scope module, "Laboratorio1" "Laboratorio1";
 .timescale 0;
V_$0x8d834c0 .var "EstimuloCompuertas", 1, 0;
V_$0x8d83510 .net "RtaAndOperadorBitABit_Funcional", 0, 0, L_0x8d848d8;
V_$0x8d85b70 .net "RtaAndOperadorCondicional_Funcional", 0, 0, L_0x8d85598;
V_$0x8d85520 .net "RtaAndUsandoNand_Estructural", 0, 0, L_0x8d855f0;
V_$0x8d847c8 .net "RtaXorOperadorCondicional_Funcional", 0, 0, L_Laboratorio1.InstanciaXorOperadorCondicional_Funcional._s19/0;
V_$0x8d84818 .net "RtaXorOperadorBitABit_Funcional", 0, 0, L_0x8d8a2c8;
V_$0x8d84888 .net "RtaXorUsandoNand_Estructural", 0, 0, L_0x8d8a330;
S_0x8d85ab0 .scope module, "InstanciaAndOperadorBitABit_Funcional" "AndOperadorBitABit_Funcional", S_0x8d88f28;
 .timescale 0;
L_0x8d848d8 .functor AND, V_$0x8d834c0[1], V_$0x8d834c0[0], C<1>, C<1>;
V_$0x8d85b20 .net "Entrada", 1, 0, V_$0x8d834c0[0], V_$0x8d834c0[1];
V_$0x8d85bc0 .net "Salida", 0, 0, L_0x8d848d8;
S_0x8d83a60 .scope module, "InstanciaAndOperadorCondicional_Funcional" "AndOperadorCondicional_Funcional", S_0x8d88f28;
 .timescale 0;
L_0x8d85598 .functor AND, V_$0x8d834c0[0], V_$0x8d834c0[1], C<1>, C<1>;
V_$0x8d88668 .net "Entrada", 1, 0, V_$0x8d834c0[0], V_$0x8d834c0[1];
V_$0x8d81e30 .net "Salida", 0, 0, L_0x8d85598;
S_0x8d83998 .scope module, "InstanciaAndUsandoNand_Estructural" "AndUsandoNand_Estructural", S_0x8d88f28;
 .timescale 0;
L_0x8d84de8 .functor NAND, V_$0x8d834c0[1], V_$0x8d834c0[0], C<1>, C<1>;
L_0x8d855f0 .functor NAND, L_0x8d84de8, L_0x8d84de8, C<1>, C<1>;
V_$0x8d83a08 .net "Cable", 0, 0, L_0x8d84de8;
V_$0x8d82590 .net "Entrada", 1, 0, V_$0x8d834c0[0], V_$0x8d834c0[1];
V_$0x8d88558 .net "Salida", 0, 0, L_0x8d855f0;
S_0x8d83410 .scope module, "InstanciaXorOperadorBitABit_Funcional" "XorOperadorBitABit_Funcional", S_0x8d88f28;
 .timescale 0;
L_0x8d8a2c8 .functor XOR, V_$0x8d834c0[1], V_$0x8d834c0[0], C<0>, C<0>;
V_$0x8d83480 .net "Entrada", 1, 0, V_$0x8d834c0[0], V_$0x8d834c0[1];
V_$0x8d823c0 .net "Salida", 0, 0, L_0x8d8a2c8;
S_0x8d885a0 .scope module, "InstanciaXorOperadorCondicional_Funcional" "XorOperadorCondicional_Funcional", S_0x8d88f28;
 .timescale 0;
L_0x8d8a3b8 .functor AND, L_0x8d87be0, L_0x8d88338, C<1>, C<1>;
L_0x8d8a248 .functor AND, L_0x8d883a0, L_0x8d881f8, C<1>, C<1>;
L_0x8d87be0 .functor NOT, V_$0x8d834c0[1], C<0>, C<0>, C<0>;
L_0x8d88338 .functor BUF, V_$0x8d834c0[0], C<0>, C<0>, C<0>;
L_0x8d883a0 .functor NOT, V_$0x8d834c0[0], C<0>, C<0>, C<0>;
L_0x8d881f8 .functor BUF, V_$0x8d834c0[1], C<0>, C<0>, C<0>;
V_$0x8d85e60 .net "Entrada", 1, 0, V_$0x8d834c0[0], V_$0x8d834c0[1];
V_$0x8d85d40 .net "Salida", 0, 0, L_Laboratorio1.InstanciaXorOperadorCondicional_Funcional._s19/0;
L_Laboratorio1.InstanciaXorOperadorCondicional_Funcional._s19/0 .functor MUXZ, L_0x8d8a248, C<1>, L_0x8d8a3b8, C<1>;
S_0x8d81dc0 .scope module, "InstanciaXorUsandoNand_Estructural" "XorUsandoNand_Estructural", S_0x8d88f28;
 .timescale 0;
L_0x8d87b88 .functor NAND, V_$0x8d834c0[1], V_$0x8d834c0[1], C<1>, C<1>;
L_0x8d87c58 .functor NAND, V_$0x8d834c0[0], V_$0x8d834c0[0], C<1>, C<1>;
L_0x8d87c88 .functor NAND, L_0x8d87b88, V_$0x8d834c0[0], C<1>, C<1>;
L_0x8d84e40 .functor NAND, L_0x8d87c58, V_$0x8d834c0[1], C<1>, C<1>;
L_0x8d8a330 .functor NAND, L_0x8d87c88, L_0x8d84e40, C<1>, C<1>;
V_$0x8d83eb8 .net "CableA", 0, 0, L_0x8d87b88;
V_$0x8d83f68 .net "CableB", 0, 0, L_0x8d87c58;
V_$0x8d84018 .net "CableC", 0, 0, L_0x8d87c88;
V_$0x8d83d48 .net "CableD", 0, 0, L_0x8d84e40;
V_$0x8d83c28 .net "Entrada", 1, 0, V_$0x8d834c0[0], V_$0x8d834c0[1];
V_$0x8d836f8 .net "Salida", 0, 0, L_0x8d8a330;
    .scope S_0x8d88f28;
T_0 ;
    %set/v V_$0x8d834c0[0], 0, 2;
    %end;
    .thread T_0;
    .scope S_0x8d88f28;
T_1 ;
    %mov 8, 0, 2;
    %mov 10, 1, 1;
    %mov 11, 0, 1;
T_1.0 %cmp/u 0, 8, 4;
    %jmp/0xz T_1.1, 5;
    %add 8, 1, 4;
    %delay 1;
    %load/v 12, V_$0x8d834c0[0], 2;
    %addi 12, 1, 2;
    %assign V_$0x8d834c0[0], 0, 12;
    %assign V_$0x8d834c0[1], 0, 13;
    %jmp T_1.0;
T_1.1 ;
    %end;
    .thread T_1;
    .scope S_0x8d88f28;
T_2 ;
    %vpi_call "$dumpfile", "Laboratorio1_Lab.vcd";
    %vpi_call "$dumpvars";
    %end;
    .thread T_2;
